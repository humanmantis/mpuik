### Type definitions saved at 2023-03-20T19:02:44.615Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
  image: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["STRAPI__COMPONENT_PAGE_ARTICLE_CONTENT_TEXTNODE", "STRAPI__COMPONENT_CARDS_CARD_DESCRIPTION_TEXTNODE", "STRAPI_POST_CONTENT_TEXTNODE", "STRAPI_EMPLOYEE_BIO_TEXTNODE"]) @derivedTypes @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

type StrapiMenus implements Node @derivedTypes @dontInfer {
  attributes: StrapiMenusAttributes
}

type StrapiMenusAttributes @derivedTypes {
  order: Int
  title: String
  url: String
  target: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  children: StrapiMenusAttributesChildren
}

type StrapiMenusAttributesChildren @derivedTypes {
  data: [StrapiMenusAttributesChildrenData]
}

type StrapiMenusAttributesChildrenData @derivedTypes {
  id: Int
  attributes: StrapiMenusAttributesChildrenDataAttributes
}

type StrapiMenusAttributesChildrenDataAttributes @derivedTypes {
  order: Int
  title: String
  url: String
  target: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  children: StrapiMenusAttributesChildrenDataAttributesChildren
}

type StrapiMenusAttributesChildrenDataAttributesChildren @derivedTypes {
  data: [StrapiMenusAttributesChildrenDataAttributesChildrenData]
}

type StrapiMenusAttributesChildrenDataAttributesChildrenData @derivedTypes {
  id: Int
  attributes: StrapiMenusAttributesChildrenDataAttributesChildrenDataAttributes
}

type StrapiMenusAttributesChildrenDataAttributesChildrenDataAttributes {
  order: Int
  title: String
  url: String
  target: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI__MEDIA implements Node @derivedTypes @dontInfer {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__MEDIAFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
  strapi_id: Int
}

type STRAPI__MEDIAFormats @derivedTypes {
  thumbnail: STRAPI__MEDIAFormatsThumbnail
  small: STRAPI__MEDIAFormatsSmall
  large: STRAPI__MEDIAFormatsLarge
  medium: STRAPI__MEDIAFormatsMedium
}

type STRAPI__MEDIAFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__MEDIAFormatsThumbnailProvider_metadata
}

type STRAPI__MEDIAFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__MEDIAFormatsSmallProvider_metadata
}

type STRAPI__MEDIAFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsLarge @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__MEDIAFormatsLargeProvider_metadata
}

type STRAPI__MEDIAFormatsLargeProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsMedium @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__MEDIAFormatsMediumProvider_metadata
}

type STRAPI__MEDIAFormatsMediumProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_SOCIAL_SOCIAL implements Node @dontInfer {
  facebook: String
  instagram: String
  telegram: String
  twitter: String
  youtube: String
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_SEO_STRUCTUREDDATA_JSONNODE implements Node @childOf(types: ["STRAPI__COMPONENT_SHARED_SEO"]) @dontInfer

type STRAPI__COMPONENT_SHARED_SEO implements Node @dontInfer {
  metaTitle: String
  metaDescription: String
  keywords: String
  metaRobots: String
  metaViewport: String
  canonicalURL: String
  structuredData: STRAPI__COMPONENT_SHARED_SEO_STRUCTUREDDATA_JSONNODE @link(by: "id", from: "structuredData___NODE")
  metaImage: STRAPI__MEDIA @link(by: "id", from: "metaImage___NODE")
  metaSocial: [STRAPI__COMPONENT_SHARED_META_SOCIAL] @link(by: "id", from: "metaSocial___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SHARED_META_SOCIAL implements Node @dontInfer {
  socialNetwork: String
  title: String
  description: String
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_SECTION_SECTION implements Node @dontInfer {
  title: String
  links: [STRAPI__COMPONENT_LIST_LINK] @link(by: "id", from: "links___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_LIST_LINK implements Node @dontInfer {
  strapi_component: String
  title: String
  link: String
  strapi_id: Int
}

type STRAPI__COMPONENT_PAGE_LIST_BLOCK implements Node @dontInfer {
  strapi_component: String
  title: String
  subtitle: String
  list: [STRAPI__COMPONENT_LIST_ITEM] @link(by: "id", from: "list___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_LIST_ITEM implements Node @dontInfer {
  title: String
  link: String
  strapi_id: Int
}

type STRAPI__COMPONENT_PAGE_GALLERY implements Node @dontInfer {
  strapi_component: String
  title: String
  subtitle: String
  type: String
  photos: [STRAPI__MEDIA] @link(by: "id", from: "photos___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_PAGE_ELECTIVE_DISCIPLINES_CARD_BLOCK implements Node @dontInfer {
  strapi_component: String
  title: String
  subtitle: String
  semesters: [STRAPI__COMPONENT_CARDS_ELECTIVE_DISCIPLINES_CARD] @link(by: "id", from: "semesters___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CARDS_ELECTIVE_DISCIPLINES_CARD implements Node @dontInfer {
  semester: String
  form: String
  silabusis: [STRAPI_SYLLABUS] @link(by: "id", from: "silabusis___NODE")
  strapi_id: Int
}

type STRAPI_SYLLABUS implements Node @dontInfer {
  discipline: String
  link: String
  year: String
  isinternal: Boolean
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  credits: Int
  isexam: Boolean
  altemployee: String
  altemployeelink: String
  order: Int
  employees: [STRAPI_EMPLOYEE] @link(by: "id", from: "employees___NODE")
  strapi_id: Int
}

type STRAPI_EMPLOYEE implements Node @derivedTypes @dontInfer {
  fullname: String
  position: String
  academiclevel: String
  academicstatus: String
  interests: String
  sefleducation: String
  email: String
  googleScholarLink: String
  slug: String
  bio: STRAPI_EMPLOYEEBio
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  order: Int
  photo: STRAPI__MEDIA @link(by: "id", from: "photo___NODE")
  publications: [STRAPI__COMPONENT_LIST_ITEM] @link(by: "id", from: "publications___NODE")
  syllabi: [STRAPI_SYLLABUS] @link(by: "id", from: "syllabi___NODE")
  strapi_id: Int
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
}

type STRAPI_EMPLOYEEBio {
  data: STRAPI_EMPLOYEE_BIO_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI_EMPLOYEE_BIO_TEXTNODE implements Node @dontInfer {
  bio: String
}

type STRAPI__COMPONENT_PAGE_CARD_BLOCK implements Node @dontInfer {
  strapi_component: String
  title: String
  subtitle: String
  variant: String
  cards: [STRAPI__COMPONENT_CARDS_CARD] @link(by: "id", from: "cards___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CARDS_CARD implements Node @derivedTypes @dontInfer {
  title: String
  description: STRAPI__COMPONENT_CARDS_CARDDescription
  icon: STRAPI__MEDIA @link(by: "id", from: "icon___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CARDS_CARDDescription {
  data: STRAPI__COMPONENT_CARDS_CARD_DESCRIPTION_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_CARDS_CARD_DESCRIPTION_TEXTNODE implements Node @dontInfer {
  description: String
}

type STRAPI__COMPONENT_PAGE_ARTICLE_CONTENT_TEXTNODE implements Node @dontInfer {
  content: String
}

type STRAPI__COMPONENT_PAGE_ARTICLE implements Node @derivedTypes @dontInfer {
  strapi_component: String
  title: String
  subtitle: String
  content: STRAPI__COMPONENT_PAGE_ARTICLEContent
  photos: [STRAPI__MEDIA] @link(by: "id", from: "photos___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_PAGE_ARTICLEContent @derivedTypes {
  medias: [STRAPI__COMPONENT_PAGE_ARTICLEContentMedias]
  data: STRAPI__COMPONENT_PAGE_ARTICLE_CONTENT_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMedias @derivedTypes {
  alternativeText: String
  url: String
  src: String
  localFile: File @link(by: "id", from: "localFile___NODE")
  file: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFile
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFile @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileProvider_metadata
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormats @derivedTypes {
  large: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsLarge
  small: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsSmall
  medium: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsMedium
  thumbnail: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsThumbnail
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsLarge @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsLargeProvider_metadata
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsLargeProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsSmallProvider_metadata
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsMedium @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsMediumProvider_metadata
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsMediumProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsThumbnailProvider_metadata
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_PAGE_ARTICLEContentMediasFileProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_PROGRAM implements Node @dontInfer {
  name: String
  slug: String
  level: String
  form: String
  specialization: String
  term: String
  program: String
  price: Int
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  cards: [STRAPI__COMPONENT_PAGE_ARTICLESTRAPI__COMPONENT_PAGE_CARD_BLOCKUnion] @link(by: "id", from: "cards___NODE")
  page: STRAPI_PAGE @link(by: "id", from: "page___NODE")
  location: STRAPI_LOCATION @link(by: "id", from: "location___NODE")
  strapi_id: Int
  photos: [STRAPI__MEDIA] @link(by: "id", from: "photos___NODE")
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
}

union STRAPI__COMPONENT_PAGE_ARTICLESTRAPI__COMPONENT_PAGE_CARD_BLOCKUnion = STRAPI__COMPONENT_PAGE_ARTICLE | STRAPI__COMPONENT_PAGE_CARD_BLOCK

type STRAPI_PAGE implements Node @dontInfer {
  title: String
  subtitle: String
  slug: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  content: [STRAPI__COMPONENT_LIST_LINKSTRAPI__COMPONENT_PAGE_ARTICLESTRAPI__COMPONENT_PAGE_CARD_BLOCKSTRAPI__COMPONENT_PAGE_ELECTIVE_DISCIPLINES_CARD_BLOCKSTRAPI__COMPONENT_PAGE_GALLERYSTRAPI__COMPONENT_PAGE_LIST_BLOCKUnion] @link(by: "id", from: "content___NODE")
  programs: [STRAPI_PROGRAM] @link(by: "id", from: "programs___NODE")
  strapi_id: Int
  location: STRAPI_LOCATION @link(by: "id", from: "location___NODE")
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
}

union STRAPI__COMPONENT_LIST_LINKSTRAPI__COMPONENT_PAGE_ARTICLESTRAPI__COMPONENT_PAGE_CARD_BLOCKSTRAPI__COMPONENT_PAGE_ELECTIVE_DISCIPLINES_CARD_BLOCKSTRAPI__COMPONENT_PAGE_GALLERYSTRAPI__COMPONENT_PAGE_LIST_BLOCKUnion = STRAPI__COMPONENT_LIST_LINK | STRAPI__COMPONENT_PAGE_ARTICLE | STRAPI__COMPONENT_PAGE_CARD_BLOCK | STRAPI__COMPONENT_PAGE_ELECTIVE_DISCIPLINES_CARD_BLOCK | STRAPI__COMPONENT_PAGE_GALLERY | STRAPI__COMPONENT_PAGE_LIST_BLOCK

type STRAPI_LOCATION implements Node @derivedTypes @dontInfer {
  title: String
  address: String
  phone: String
  email: String
  latitude: String
  longitude: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  list: [STRAPI_LOCATIONList]
  social: STRAPI_LOCATIONSocial
  strapi_id: Int
}

type STRAPI_LOCATIONList {
  id: Int
  title: String
  link: String
}

type STRAPI_LOCATIONSocial {
  id: Int
  facebook: String
  instagram: String
  telegram: String
  twitter: String
  youtube: String
}

type STRAPI_POST_CONTENT_TEXTNODE implements Node @dontInfer {
  content: String
}

type STRAPI_POST implements Node @derivedTypes @dontInfer {
  title: String
  slug: String
  content: STRAPI_POSTContent
  description: String
  pinned: Boolean
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  order: Int
  photo: STRAPI__MEDIA @link(by: "id", from: "photo___NODE")
  strapi_id: Int
  category: STRAPI_CATEGORY @link(by: "id", from: "category___NODE")
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
}

type STRAPI_POSTContent @derivedTypes {
  medias: [STRAPI_POSTContentMedias]
  data: STRAPI_POST_CONTENT_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI_POSTContentMedias @derivedTypes {
  alternativeText: String
  url: String
  src: String
  localFile: File @link(by: "id", from: "localFile___NODE")
  file: STRAPI_POSTContentMediasFile
}

type STRAPI_POSTContentMediasFile @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI_POSTContentMediasFileFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: STRAPI_POSTContentMediasFileProvider_metadata
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_POSTContentMediasFileFormats @derivedTypes {
  large: STRAPI_POSTContentMediasFileFormatsLarge
  small: STRAPI_POSTContentMediasFileFormatsSmall
  medium: STRAPI_POSTContentMediasFileFormatsMedium
  thumbnail: STRAPI_POSTContentMediasFileFormatsThumbnail
}

type STRAPI_POSTContentMediasFileFormatsLarge @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI_POSTContentMediasFileFormatsLargeProvider_metadata
}

type STRAPI_POSTContentMediasFileFormatsLargeProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_POSTContentMediasFileFormatsSmall @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI_POSTContentMediasFileFormatsSmallProvider_metadata
}

type STRAPI_POSTContentMediasFileFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_POSTContentMediasFileFormatsMedium @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI_POSTContentMediasFileFormatsMediumProvider_metadata
}

type STRAPI_POSTContentMediasFileFormatsMediumProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_POSTContentMediasFileFormatsThumbnail @derivedTypes {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
  provider_metadata: STRAPI_POSTContentMediasFileFormatsThumbnailProvider_metadata
}

type STRAPI_POSTContentMediasFileFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_POSTContentMediasFileProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI_CATEGORY implements Node @dontInfer {
  name: String
  slug: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  posts: [STRAPI_POST] @link(by: "id", from: "posts___NODE")
  strapi_id: Int
}

type STRAPI_HOME implements Node @dontInfer {
  title: String
  subtitle: String
  partnershipText: String
  videoLink: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  speciality: String
  specialization: String
  button: STRAPI__COMPONENT_LIST_LINK @link(by: "id", from: "button___NODE")
  partnershipIcons: [STRAPI__MEDIA] @link(by: "id", from: "partnershipIcons___NODE")
  universityLogo: STRAPI__MEDIA @link(by: "id", from: "universityLogo___NODE")
  instituteLogo: STRAPI__MEDIA @link(by: "id", from: "instituteLogo___NODE")
  institute: STRAPI__COMPONENT_LIST_LINK @link(by: "id", from: "institute___NODE")
  university: STRAPI__COMPONENT_LIST_LINK @link(by: "id", from: "university___NODE")
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
  strapi_id: Int
}

type STRAPI_FOOTER implements Node @dontInfer {
  additionalText: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sections: [STRAPI__COMPONENT_SECTION_SECTION] @link(by: "id", from: "sections___NODE")
  location: STRAPI_LOCATION @link(by: "id", from: "location___NODE")
  strapi_id: Int
}

type STRAPI_EDU_SCIENCE_PROGRAM implements Node @dontInfer {
  program: String
  programlink: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  order: String
  reviews: [STRAPI__COMPONENT_LIST_LINK] @link(by: "id", from: "reviews___NODE")
  feedbacks: [STRAPI__COMPONENT_LIST_LINK] @link(by: "id", from: "feedbacks___NODE")
  strapi_id: Int
}